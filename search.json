[{"path":"https://hub.analythium.io/tryr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Solymos. Author, maintainer. Analythium Solutions Inc.. Copyright holder, funder.","code":""},{"path":"https://hub.analythium.io/tryr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Solymos P (2023). tryr: Client/Server Error Handling HTTP APIs. R package version 0.0.1, https://github.com/analythium/tryr.","code":"@Manual{,   title = {tryr: Client/Server Error Handling for HTTP APIs},   author = {Peter Solymos},   year = {2023},   note = {R package version 0.0.1},   url = {https://github.com/analythium/tryr}, }"},{"path":"https://hub.analythium.io/tryr/index.html","id":"tryr-clientserver-error-handling-for-http-apis","dir":"","previous_headings":"","what":"tryr: Manage R Configuration at the Command Line","title":"tryr: Manage R Configuration at the Command Line","text":"Differentiate client errors (4xx) server errors (5xx) simple built-logging mechanism Plumber RestRserve HTTP API frameworks. client/server setups, client might send user input incorrect. cases front end application needs know 4xx error status indicates message needs relayed user correct input. opposed , server fails due unexpected reasons, client needs know error 5xx status happened. Logs essential backend developers diagnose problem.","code":"remotes::install_github(\"analythium/tryr\")"},{"path":"https://hub.analythium.io/tryr/index.html","id":"problem-statement","dir":"","previous_headings":"","what":"Problem statement","title":"tryr: Manage R Configuration at the Command Line","text":"Plumber R package implements simple error catching hook converts responses error condition status code 500 - Internal Server Error. Let’s see example API:","code":"plumber::pr(\"inst/examples/plumber.R\") |>   plumber::pr_set_debug(FALSE) |>   plumber::pr_run(port=8000)"},{"path":"https://hub.analythium.io/tryr/index.html","id":"default-behavior","dir":"","previous_headings":"Problem statement","what":"Default behavior","title":"tryr: Manage R Configuration at the Command Line","text":"use handler calling function foo(): note contents response also depend pr_set_debug() settings depends whether use interactive non-interactive session. now turned can see ‘production’ behavior. responses /test endpoint various specification x parameter: can see, response generic 500 HTTP status irrespective nature error. back end, error printed STDOUT, whereas warning got printed STDERR. default behavior undesired multiple reasons: need able differentiate 4xx 5xx errors detailed error message helpful backend, print STDERR instead STDOUT Warning: pr_set_debug(TRUE) error message returned response, might contain sensitive information leak client.","code":"foo <- function(x) {   x <- as.numeric(x)   if (x < 0)     stop(\"'x' is too low.\")   \"Success!\" }  #* @post /test function(x) {   foo(x = x) } # --- Request --- # curl -X POST \"http://localhost:8000/test?x=0\" # --- Response --- # [\"Success!\"] # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server  # --- Request --- # curl -X POST \"http://localhost:8000/test?x=-1\" # --- Response --- # {\"error\":\"500 - Internal server error\"} # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server  # --- Request --- # curl -X POST \"http://localhost:8000/test?x=a\" # --- Response --- # {\"error\":\"500 - Internal server error\"} # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server  # --- Request --- # curl -X POST \"http://localhost:8000/test?x=\" # --- Response --- # {\"error\":\"500 - Internal server error\"} # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server"},{"path":"https://hub.analythium.io/tryr/index.html","id":"trycatch-behavior","dir":"","previous_headings":"","what":"Try/catch behavior","title":"tryr: Manage R Configuration at the Command Line","text":"Alternatively, can use functions tryr handle inconveniences: outputs /try endpoint requests : Now can see : Successful response (200) leaves trace STDOUT can differentiate 4xx 5xx errors error 5xx, error message included detailed error message printed STDERR ? get tryr: used http_try(). wrapper can handle expected unexpected errors. Expected errors give desired HTTP statuses using http_error(). Unexpected error returned stop() little control (.e. written someone else).","code":"bar <- function(x) {   x <- suppressWarnings(as.numeric(x))   if (is.na(x))     tryr::http_error(400L, \"Unexpected input.\")   foo(x) }  #* @post /try function(req, res, x) {   tryr::http_try(req, res, {     if (missing(x))       stop(\"'x' is missing\", call. = FALSE)     bar(x = x)   }) } # --- Request --- # curl -X POST \"http://localhost:8000/try?x=0\" # --- Response --- # [\"Success!\"] # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=-1\" # --- Response --- # {\"category\":\"Server Error\",\"status\":500,\"message\":\"Internal Server Error\"} # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=a\" # --- Response --- # {\"category\":\"Client Error\",\"status\":400,\"message\":\"Bad Request - Unexpected input.\"} # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=\" # --- Response --- # {\"category\":\"Server Error\",\"status\":500,\"message\":\"Internal Server Error\"} # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server"},{"path":"https://hub.analythium.io/tryr/index.html","id":"implementation","dir":"","previous_headings":"","what":"Implementation","title":"tryr: Manage R Configuration at the Command Line","text":"logic inside http_try() : catch error: log ERROR + print error message STDERR return generic status 500 message set status code response object 500 log ERROR message condition attribute return specific HTTP error code structured output set status code response object don’t catch error: log SUCCESS message element return specific HTTP status code structured output set status code response object log SUCCESS generic 200 message return object (default status code 200 assumed) Log messages handled msg function. can add preroute hook: add logger print incoming request info (HTTP method route) STDOUT. sake better ingesting logs can set logging type JSON (CSV) timestamp precision 6 digits. Output: Structured errors handled http_error() function uses default error messages defined http_status_codes data frame. http_success() works similarly produce error. can also pass body argument. useful need return simple status messages responding webhooks async execution. http_response() can used status codes behind http_handler() function useful set default handlers Plumber:","code":"Sys.setenv(   TRYR_LOG_FORMAT = \"JSON\",   TRYR_LOG_DIGITS = \"6\" ) plumber::pr(\"inst/examples/plumber.R\") |>   plumber::pr_set_debug(FALSE) |>   plumber::pr_hooks(     list(       preroute = function(data, req, res) {         tryr::msg(           title = paste(             method = req$REQUEST_METHOD,              path = req$PATH_INFO           ),           level = \"INFO\"         )       }     )   ) |>   plumber::pr_run(     port = 8000,     quiet = TRUE) # --- Request --- # curl -X POST \"http://localhost:8000/try?x=0\" # --- Response --- # [\"Success!\"] # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=-1\" # --- Response --- # {\"category\":\"Server Error\",\"status\":500,\"message\":\"Internal Server Error\"} # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=a\" # --- Response --- # {\"category\":\"Client Error\",\"status\":400,\"message\":\"Bad Request - Unexpected input.\"} # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=\" # --- Response --- # {\"category\":\"Server Error\",\"status\":500,\"message\":\"Internal Server Error\"} # --- STDOUT --- #  # --- STDERR --- # createTcpServer: address already in use # Error in initialize(...) : Failed to create server plumber::pr(\"inst/examples/plumber.R\") |>   plumber::pr_set_debug(FALSE) |>   plumber::pr_set_404(     function(req, res) {       tryr::msg(         title = paste0(           \"Status 404: \",            tryr::http_status_codes[\"404\", \"message\"]),         level = \"INFO\"       )       tryr::http_handler(req, res, 404L)     }   ) |>   plumber::pr_set_error(     function(req, res, err) {       tryr::msg(         title = paste0(           \"Status 500: \",            tryr::http_status_codes[\"500\", \"message\"]),         message = err,         level = \"ERROR\"       )       tryr::http_handler(req, res, 500L)     }   ) |>   plumber::pr_hooks(     list(       preroute = function(data, req, res) {         tryr::msg(           title = paste(             method = req$REQUEST_METHOD,              path = req$PATH_INFO           ),           level = \"INFO\"         )       }     )   ) |>   plumber::pr_run(     port = 8000,      quiet = TRUE)"},{"path":"https://hub.analythium.io/tryr/index.html","id":"see-the-action","dir":"","previous_headings":"","what":"See the action","title":"tryr: Manage R Configuration at the Command Line","text":"inst/examples folder contains Shiny apps can edit use explore differences Plumber’s default error handling (/test endpoint) tryr approach (/tryr endpoint). See response, request, STDOUT STDERR calls:  second app general. can edit plumber_fun function definition explore API’s output printed STDOUT STDERR:","code":"source(\"inst/examples/app.R\") source(\"inst/examples/explore.R\")"},{"path":"https://hub.analythium.io/tryr/index.html","id":"supported-api-frameworks","dir":"","previous_headings":"","what":"Supported API frameworks","title":"tryr: Manage R Configuration at the Command Line","text":"plumber: popular API framework R accounting 95% total downloads. RestRserve: 2nd populat framework accounting 2% total downloads. See RestRserve.R example. frameworks (fiery, beakr, ambiorix) supported – using likely result error.","code":""},{"path":"https://hub.analythium.io/tryr/index.html","id":"other-considerations","dir":"","previous_headings":"","what":"Other considerations","title":"tryr: Manage R Configuration at the Command Line","text":"Similar ideas tryCatchLog package general use case. STDOUT buffered, needs flush. STDERR unbuffered, immediate (progress reports/logging information belong stderr stdout?)","code":""},{"path":"https://hub.analythium.io/tryr/reference/api_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"Find out the API framework — api_framework","title":"Find out the API framework — api_framework","text":"Find API framework","code":""},{"path":"https://hub.analythium.io/tryr/reference/api_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find out the API framework — api_framework","text":"","code":"api_framework(req, res)"},{"path":"https://hub.analythium.io/tryr/reference/api_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find out the API framework — api_framework","text":"req request object. res response object.","code":""},{"path":"https://hub.analythium.io/tryr/reference/api_framework.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find out the API framework — api_framework","text":"character vector length 1 name inferred R package NA (behaves Plumber). Unsupported frameworks produce error.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP messages — http-messages","title":"HTTP messages — http-messages","text":"HTTP messages","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP messages — http-messages","text":"","code":"http_error(status = 500L, message = NULL)  http_success(status = 200L, message = NULL, body = NULL)  http_response(status = 200L, message = NULL, body = NULL)  http_handler(req, res, status, ...)"},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP messages — http-messages","text":"status HTTP status code. message Error message. body list, additional values returned. req request object. res response object. ... arguments passed http_response.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTTP messages — http-messages","text":"http_error returns error custom condition attribute. http_success returns list.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP messages — http-messages","text":"","code":"try(http_error()) #> Error : Internal Server Error try(http_error(400)) #> Error : Bad Request try(http_error(400, \"Sorry\")) #> Error : Bad Request - Sorry  http_success() #> $category #> [x] \"Success\" #>  #> $status #> [x] 200 #>  #> $message #> [x] \"OK\" #>  #> attr(,\"class\") #> [1] \"http_success\"  \"http_response\" http_success(201) #> $category #> [x] \"Success\" #>  #> $status #> [x] 201 #>  #> $message #> [x] \"Created\" #>  #> attr(,\"class\") #> [1] \"http_success\"  \"http_response\" http_success(201, \"Awesome\") #> $category #> [x] \"Success\" #>  #> $status #> [x] 201 #>  #> $message #> [x] \"Created - Awesome\" #>  #> attr(,\"class\") #> [1] \"http_success\"  \"http_response\" http_success(201, \"Awesome\", list(name = \"Jane\", count = 6)) #> $category #> [x] \"Success\" #>  #> $status #> [x] 201 #>  #> $message #> [x] \"Created - Awesome\" #>  #> $body #> $body$name #> [1] \"Jane\" #>  #> $body$count #> [1] 6 #>  #>  #> attr(,\"class\") #> [1] \"http_success\"  \"http_response\""},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":null,"dir":"Reference","previous_headings":"","what":"Try mechanism for Plumber APIs — http-try","title":"Try mechanism for Plumber APIs — http-try","text":"Helps differentiate client (4xx) server (5xx) errors, provides mechanism return custom status codes combination http_error() https_success().","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try mechanism for Plumber APIs — http-try","text":"","code":"http_try(req, res, expr, silent = TRUE, ...)  http_try_handler(req, res, x)"},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try mechanism for Plumber APIs — http-try","text":"req request object. res response object. expr expression. silent report error messages suppressed try()? ... Arguments passed try() x return value try(expr).","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try mechanism for Plumber APIs — http-try","text":"list results expr. side effect setting response status code log message.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try mechanism for Plumber APIs — http-try","text":"","code":"res <- req <- list()  http_try(req, res) #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>  http_try(req, res, {2 + 2}) #> 6387 | 2023-06-16 02:24:17.962 [SUCCESS] Status 200: OK #> [1] 4 http_try(req, res, http_error(401)) #> $category #> [x] \"Client Error\" #>  #> $status #> [x] 401 #>  #> $message #> [x] \"Unauthorized\" #>  http_try(req, res, http_success(201)) #> 6387 | 2023-06-16 02:24:17.967 [SUCCESS] Status 201: Created #> $category #> [x] \"Success\" #>  #> $status #> [x] 201 #>  #> $message #> [x] \"Created\" #>  http_try(req, res, {lm(NULL)}) #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>  http_try(req, res, {stop(\"Stop!!!\")}) #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>   f <- function() stop(\"Stop!!!\") http_try(req, res, {f()}) #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>  http_try_handler(req, res, {try(f())}) #> Error in f() : Stop!!! #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>"},{"path":"https://hub.analythium.io/tryr/reference/http_status_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame with possible status codes and default messages — http_status_codes","title":"Data frame with possible status codes and default messages — http_status_codes","text":"Data frame possible status codes default messages","code":""},{"path":"https://hub.analythium.io/tryr/reference/http_status_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame with possible status codes and default messages — http_status_codes","text":"","code":"http_status_codes"},{"path":"https://hub.analythium.io/tryr/reference/http_status_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame with possible status codes and default messages — http_status_codes","text":"object class data.frame 62 rows 3 columns.","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Message to STDOUT or STDERR — msg","title":"Message to STDOUT or STDERR — msg","text":"Message STDOUT STDERR","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Message to STDOUT or STDERR — msg","text":"","code":"msg(title = \"\", message = \"\", level = \"INFO\", format = NULL, digits = NULL)"},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Message to STDOUT or STDERR — msg","text":"title Title. message Message. level Log level. format Log format: \"PLAIN\" (default), \"JSON\", \"CSV\".. digits Digits seconds (default 3L).","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Message to STDOUT or STDERR — msg","text":"TRUE FALSE: log event happened? side effect log message STDOUT STDERR.","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Message to STDOUT or STDERR — msg","text":"","code":"msg(\"Success\", \"We did it!\") #> 6387 | 2023-06-16 02:24:18.622 [INFO   ] Success - We did it! msg(\"Success\", \"We did it!\", \"SUCCESS\") #> 6387 | 2023-06-16 02:24:18.624 [SUCCESS] Success - We did it! msg(\"Crap\", \"Oh no ...\", \"ERROR\")  msg(\"Success\", \"We did it!\", \"SUCCESS\", format = \"JSON\") #> {\"pid\":\"6387\",\"ts\":\"2023-06-16 02:24:18.627\",\"ut\":1686882258.62755,\"level\":\"SUCCESS\",\"value\":4,\"title\":\"Success\",\"message\":\"We did it!\"} msg(\"Success\", \"We did it!\", format = \"JSON\") #> {\"pid\":\"6387\",\"ts\":\"2023-06-16 02:24:18.629\",\"ut\":1686882258.62907,\"level\":\"INFO\",\"value\":3,\"title\":\"Success\",\"message\":\"We did it!\"} msg(\"Crap\", \"Oh no ...\", \"ERROR\", format = \"JSON\")  msg(\"Success\", \"We did it!\", digits = 0) #> 6387 | 2023-06-16 02:24:18 [INFO   ] Success - We did it! msg(\"Success\", \"We did it!\", digits = 6) #> 6387 | 2023-06-16 02:24:18.63376 [INFO   ] Success - We did it!"},{"path":"https://hub.analythium.io/tryr/reference/oneline.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove newlines and leading/trailing white space from a string — oneline","title":"Remove newlines and leading/trailing white space from a string — oneline","text":"Remove newlines leading/trailing white space string","code":""},{"path":"https://hub.analythium.io/tryr/reference/oneline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove newlines and leading/trailing white space from a string — oneline","text":"","code":"oneline(x)"},{"path":"https://hub.analythium.io/tryr/reference/oneline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove newlines and leading/trailing white space from a string — oneline","text":"x string, possibly vector","code":""},{"path":"https://hub.analythium.io/tryr/reference/oneline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove newlines and leading/trailing white space from a string — oneline","text":"atomic character vector.","code":""},{"path":"https://hub.analythium.io/tryr/news/index.html","id":"version-001","dir":"Changelog","previous_headings":"","what":"Version 0.0.1","title":"Version 0.0.1","text":"Experimental release.","code":""}]
