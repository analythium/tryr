[{"path":"https://hub.analythium.io/tryr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Solymos. Author, maintainer. Analythium Solutions Inc.. Copyright holder, funder.","code":""},{"path":"https://hub.analythium.io/tryr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Solymos P (2022). tryr: Client/Server Error Handling Plumber APIs. R package version 0.0.1, https://github.com/analythium/tryr.","code":"@Manual{,   title = {tryr: Client/Server Error Handling for Plumber APIs},   author = {Peter Solymos},   year = {2022},   note = {R package version 0.0.1},   url = {https://github.com/analythium/tryr}, }"},{"path":"https://hub.analythium.io/tryr/index.html","id":"tryr-clientserver-error-handling-for-plumber-apis","dir":"","previous_headings":"","what":"tryr: Manage R Configuration at the Command Line","title":"tryr: Manage R Configuration at the Command Line","text":"client/server setups, client might send user input incorrect. cases front end application needs know 4xx error status indicates message needs relayed user correct input. opposed , server fails due unexpected reasons, client needs know error 5xx status happened. Logs essential backend developers diagnose problem.","code":"remotes::install_github(\"analythium/tryr\")"},{"path":"https://hub.analythium.io/tryr/index.html","id":"problem-statement","dir":"","previous_headings":"","what":"Problem statement","title":"tryr: Manage R Configuration at the Command Line","text":"Plumber R package implements simple error catching hook converts responses error condition status code 500 - Internal Server Error. Let’s see example API:","code":"plumber::pr(\"inst/examples/plumber.R\") |>   plumber::pr_set_debug(FALSE) |>   plumber::pr_run(port=8000)"},{"path":"https://hub.analythium.io/tryr/index.html","id":"default-behavior","dir":"","previous_headings":"Problem statement","what":"Default behavior","title":"tryr: Manage R Configuration at the Command Line","text":"use simple handler calling function foo(): note contents response also depend pr_set_debug() settings depends whether use interactive non-interactive session. Therefore turned interactive examples. responses /test endpoint: can see, response generic 500 HTTP status irrespective nature error. Moreover response contains error message R. back end, error printed STDOUT, whereas warning got printed STDERR. default behavior undesired multiple reasons: need able differentiate 4xx 5xx errors error 5xx, error message might contain sensitive information leak client detailed error message helpful backend, print STDERR instead STDOUT","code":"foo <- function(x) {   x <- as.numeric(x)   if (x < 0)     stop(\"'x' is too low.\")   \"Success!\" }  #* @post /test function(x) {   foo(x = x) } # --- Request --- # curl -X POST \"http://localhost:8000/test?x=0\" # --- Response --- # [\"Success!\"] # --- STDOUT --- #  # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/  # --- Request --- # curl -X POST \"http://localhost:8000/test?x=-1\" # --- Response --- # {\"error\":\"500 - Internal server error\"} # --- STDOUT --- # <simpleError in foo(x = x): 'x' is too low.> # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/  # --- Request --- # curl -X POST \"http://localhost:8000/test?x=a\" # --- Response --- # {\"error\":\"500 - Internal server error\"} # --- STDOUT --- # <simpleError in if (x < 0) stop(\"'x' is too low.\"): missing value where TRUE/FALSE needed> # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/ # Warning in foo(x = x) : NAs introduced by coercion  # --- Request --- # curl -X POST \"http://localhost:8000/test?x=\" # --- Response --- # {\"error\":\"500 - Internal server error\"} # --- STDOUT --- # <simpleError in foo(x = x): argument \"x\" is missing, with no default> # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/"},{"path":"https://hub.analythium.io/tryr/index.html","id":"trycatch-behavior","dir":"","previous_headings":"","what":"Try/catch behavior","title":"tryr: Manage R Configuration at the Command Line","text":"Alternatively, can use functions tryr handle inconveniences: outputs /try endpoint: Now can see : Successful response (200) leaves trace STDERR along error messages can differentiate 4xx 5xx errors error 5xx, error message included detailed error message printed STDERR ? get tryr: used http_try(). wrapper can handle expected unexpected errors. Expected errors give desired HTTP statuses using http_error(). Unexpected error returned stop() little control (.e. written someone else).","code":"bar <- function(x) {   x <- suppressWarnings(as.numeric(x))   if (is.na(x))     tryr::http_error(400L, \"Unexpected input.\")   foo(x) }  #* @post /try function(res, x) {   tryr::http_try(res, {     if (missing(x))       stop(\"'x' is missing\", call. = FALSE)     bar(x = x)   }) } # --- Request --- # curl -X POST \"http://localhost:8000/try?x=0\" # --- Response --- # [\"Success!\"] # --- STDOUT --- # 2022-10-17 16:17:46.02 [SUCCESS] Status 200: OK # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=-1\" # --- Response --- # {\"category\":\"Server Error\",\"status\":500,\"message\":\"Internal Server Error\"} # --- STDOUT --- #  # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/ # 2022-10-17 16:17:47.08 [ERROR  ] Status 500: Internal Server Error - Error in foo(x) : 'x' is too low.  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=a\" # --- Response --- # {\"category\":\"Client Error\",\"status\":400,\"message\":\"Bad Request - Unexpected input.\"} # --- STDOUT --- #  # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/ # 2022-10-17 16:17:48.14 [ERROR  ] Status 400: Bad Request - Unexpected input.  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=\" # --- Response --- # {\"category\":\"Server Error\",\"status\":500,\"message\":\"Internal Server Error\"} # --- STDOUT --- #  # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/ # 2022-10-17 16:17:49.21 [ERROR  ] Status 500: Internal Server Error - Error : 'x' is missing"},{"path":"https://hub.analythium.io/tryr/index.html","id":"implementation","dir":"","previous_headings":"","what":"Implementation","title":"tryr: Manage R Configuration at the Command Line","text":"logic inside http_try() : catch error: log ERROR + print error message STDERR return generic status 500 message set status code response object 500 log ERROR message condition attribute return specific HTTP error code structured output set status code response object don’t catch error: log SUCCESS message element return specific HTTP status code structured output set status code response object log SUCCESS generic 200 message return object (default status code 200 assumed) Messages handled msg function. can add preroute hook. add logger print incoming request info (HTTP method route) STDOUT. sake better ingest logs can set logging type JSON timestamp precision 6 digits. Output: Structured errors handled http_error() function uses default error messages defined http_status_codes data frame. http_success() works similarly produce error. can also pass body argument. useful need return simple status messages responding webhooks async execution.","code":"Sys.setenv(   TRYR_LOG_FORMAT = \"JSON\",   TRYR_LOG_DIGITS = \"6\" ) plumber::pr(\"inst/examples/plumber.R\") |>   plumber::pr_set_debug(FALSE) |>   plumber::pr_hooks(     list(       preroute = function(data, req, res) {         tryr::msg(           title = paste(             method = req$REQUEST_METHOD,              path = req$PATH_INFO           ),           level = \"INFO\"         )       }     )   ) |>   plumber::pr_run(port=8000) # --- Request --- # curl -X POST \"http://localhost:8000/try?x=0\" # --- Response --- # [\"Success!\"] # --- STDOUT --- # {\"ts\":\"2022-10-17 16:17:50.265825\",\"ut\":1666045070.26583,\"level\":\"INFO\",\"value\":3,\"title\":\"POST /try\",\"message\":\"\"} # {\"ts\":\"2022-10-17 16:17:50.294553\",\"ut\":1666045070.29455,\"level\":\"SUCCESS\",\"value\":4,\"title\":\"Status 200: OK\",\"message\":\"\"} # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=-1\" # --- Response --- # {\"category\":\"Server Error\",\"status\":500,\"message\":\"Internal Server Error\"} # --- STDOUT --- # {\"ts\":\"2022-10-17 16:17:51.342638\",\"ut\":1666045071.34264,\"level\":\"INFO\",\"value\":3,\"title\":\"POST /try\",\"message\":\"\"} # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/ # {\"ts\":\"2022-10-17 16:17:51.37395\",\"ut\":1666045071.37395,\"level\":\"ERROR\",\"value\":6,\"title\":\"Status 500: Internal Server Error\",\"message\":\"Error in foo(x) : 'x' is too low.\"}  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=a\" # --- Response --- # {\"category\":\"Client Error\",\"status\":400,\"message\":\"Bad Request - Unexpected input.\"} # --- STDOUT --- # {\"ts\":\"2022-10-17 16:17:52.411391\",\"ut\":1666045072.41139,\"level\":\"INFO\",\"value\":3,\"title\":\"POST /try\",\"message\":\"\"} # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/ # {\"ts\":\"2022-10-17 16:17:52.438956\",\"ut\":1666045072.43896,\"level\":\"ERROR\",\"value\":6,\"title\":\"Status 400: Bad Request - Unexpected input.\",\"message\":\"\"}  # --- Request --- # curl -X POST \"http://localhost:8000/try?x=\" # --- Response --- # {\"category\":\"Server Error\",\"status\":500,\"message\":\"Internal Server Error\"} # --- STDOUT --- # {\"ts\":\"2022-10-17 16:17:53.483086\",\"ut\":1666045073.48309,\"level\":\"INFO\",\"value\":3,\"title\":\"POST /try\",\"message\":\"\"} # --- STDERR --- # Running plumber API at http://127.0.0.1:8000 # Running swagger Docs at http://127.0.0.1:8000/__docs__/ # {\"ts\":\"2022-10-17 16:17:53.514566\",\"ut\":1666045073.51457,\"level\":\"ERROR\",\"value\":6,\"title\":\"Status 500: Internal Server Error\",\"message\":\"Error : 'x' is missing\"}"},{"path":"https://hub.analythium.io/tryr/index.html","id":"readings","dir":"","previous_headings":"","what":"Readings","title":"tryr: Manage R Configuration at the Command Line","text":"https://cran.r-project.org/web/packages/tryCatchLog/vignettes/tryCatchLog-intro.html","code":""},{"path":"https://hub.analythium.io/tryr/index.html","id":"considerations","dir":"","previous_headings":"","what":"Considerations","title":"tryr: Manage R Configuration at the Command Line","text":"STDOUT buffered, needs flush. STDERR unbuffered, immediate https://unix.stackexchange.com/questions/331611/-progress-reports-logging-information-belong--stderr--stdout API fail","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP messages — http-messages","title":"HTTP messages — http-messages","text":"HTTP messages","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP messages — http-messages","text":"","code":"http_error(status = 500L, message = NULL)  http_success(status = 200L, message = NULL, body = NULL)"},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP messages — http-messages","text":"status HTTP status code. message Error message. body list, additional values returned.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTTP messages — http-messages","text":"http_error returns error custom condition attribute. http_success returns list.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP messages — http-messages","text":"","code":"try(http_error()) #> Error : Internal Server Error try(http_error(400)) #> Error : Bad Request try(http_error(400, \"Sorry\")) #> Error : Bad Request - Sorry  http_success() #> $category #> [x] \"Success\" #>  #> $status #> [x] 200 #>  #> $message #> [x] \"OK\" #>  #> attr(,\"class\") #> [1] \"http_success\" http_success(201) #> $category #> [x] \"Success\" #>  #> $status #> [x] 201 #>  #> $message #> [x] \"Created\" #>  #> attr(,\"class\") #> [1] \"http_success\" http_success(201, \"Awesome\") #> $category #> [x] \"Success\" #>  #> $status #> [x] 201 #>  #> $message #> [x] \"Created - Awesome\" #>  #> attr(,\"class\") #> [1] \"http_success\" http_success(201, \"Awesome\", list(name = \"Jane\", count = 6)) #> $category #> [x] \"Success\" #>  #> $status #> [x] 201 #>  #> $message #> [x] \"Created - Awesome\" #>  #> $body #> $body$name #> [1] \"Jane\" #>  #> $body$count #> [1] 6 #>  #>  #> attr(,\"class\") #> [1] \"http_success\""},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":null,"dir":"Reference","previous_headings":"","what":"Try mechanism for Plumber APIs — http-try","title":"Try mechanism for Plumber APIs — http-try","text":"Helps differentiate client (4xx) server (5xx) errors, provides mechanism return custom status codes combination http_error() https_success().","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try mechanism for Plumber APIs — http-try","text":"","code":"http_try_handler(res, x)  http_try(res, expr, silent = TRUE, ...)"},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try mechanism for Plumber APIs — http-try","text":"res response object. x return value try(expr). expr expression. silent report error messages suppressed try()? ... Arguments passed try()","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try mechanism for Plumber APIs — http-try","text":"list results expr. side effect setting response status code log message.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-try.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try mechanism for Plumber APIs — http-try","text":"","code":"res <- list() http_try(res) #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>  http_try(res, {2 + 2}) #> 2022-10-18 04:23:57.72 [SUCCESS] Status 200: OK #> [1] 4 http_try(res, http_error(401)) #> $category #> [x] \"Client Error\" #>  #> $status #> [x] 401 #>  #> $message #> [x] \"Unauthorized\" #>  http_try(res, http_success(201)) #> 2022-10-18 04:23:57.73 [SUCCESS] Status 201: Created #> $category #> [x] \"Success\" #>  #> $status #> [x] 201 #>  #> $message #> [x] \"Created\" #>  http_try(res, {lm(NULL)}) #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>  http_try(res, {stop(\"Stop!!!\")}) #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>   f <- function() stop(\"Stop!!!\") http_try(res, {f()}) #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>  http_try_handler(res, {try(f())}) #> Error in f() : Stop!!! #> $category #> [x] \"Server Error\" #>  #> $status #> [x] 500 #>  #> $message #> [x] \"Internal Server Error\" #>"},{"path":"https://hub.analythium.io/tryr/reference/http_status_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame with possible status codes and default messages — http_status_codes","title":"Data frame with possible status codes and default messages — http_status_codes","text":"Data frame possible status codes default messages","code":""},{"path":"https://hub.analythium.io/tryr/reference/http_status_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame with possible status codes and default messages — http_status_codes","text":"","code":"http_status_codes"},{"path":"https://hub.analythium.io/tryr/reference/http_status_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame with possible status codes and default messages — http_status_codes","text":"object class data.frame 62 rows 3 columns.","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Message to STDOUT or STDERR — msg","title":"Message to STDOUT or STDERR — msg","text":"Message STDOUT STDERR","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Message to STDOUT or STDERR — msg","text":"","code":"msg(title = \"\", message = \"\", level = \"INFO\", json = NULL, digits = NULL)"},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Message to STDOUT or STDERR — msg","text":"title Title. message Message. level Log level. json Log format JSON (default TRUE). digits Digits seconds (default 2L).","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Message to STDOUT or STDERR — msg","text":"TRUE FALSE: log event happened? side effect log message STDOUT STDERR.","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Message to STDOUT or STDERR — msg","text":"","code":"msg(\"Success\", \"We did it!\") #> 2022-10-18 04:23:58.31 [INFO   ] Success - We did it! msg(\"Success\", \"We did it!\", \"SUCCESS\") #> 2022-10-18 04:23:58.31 [SUCCESS] Success - We did it! msg(\"Crap\", \"Oh no ...\", \"ERROR\")  msg(\"Success\", \"We did it!\", \"SUCCESS\", json=TRUE) #> {\"ts\":\"2022-10-18 04:23:58.31\",\"ut\":1666067038.31945,\"level\":\"SUCCESS\",\"value\":4,\"title\":\"Success\",\"message\":\"We did it!\"} msg(\"Success\", \"We did it!\", json=TRUE) #> {\"ts\":\"2022-10-18 04:23:58.32\",\"ut\":1666067038.32156,\"level\":\"INFO\",\"value\":3,\"title\":\"Success\",\"message\":\"We did it!\"} msg(\"Crap\", \"Oh no ...\", \"ERROR\", json=TRUE)  msg(\"Success\", \"We did it!\", digits = 0) #> 2022-10-18 04:23:58 [INFO   ] Success - We did it! msg(\"Success\", \"We did it!\", digits = 6) #> 2022-10-18 04:23:58.328094 [INFO   ] Success - We did it!"},{"path":"https://hub.analythium.io/tryr/news/index.html","id":"version-001","dir":"Changelog","previous_headings":"","what":"Version 0.0.1","title":"Version 0.0.1","text":"Experimental release.","code":""}]
