[{"path":"https://hub.analythium.io/tryr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Solymos. Author, maintainer. Analythium Solutions Inc.. Copyright holder, funder.","code":""},{"path":"https://hub.analythium.io/tryr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Solymos P (2022). tryr: Try/catch Mechanisms Plumber APIs. R package version 0.0.1, https://github.com/analythium/tryr.","code":"@Manual{,   title = {tryr: Try/catch Mechanisms for Plumber APIs},   author = {Peter Solymos},   year = {2022},   note = {R package version 0.0.1},   url = {https://github.com/analythium/tryr}, }"},{"path":"https://hub.analythium.io/tryr/index.html","id":"tryr-trycatch-mechanisms-for-plumber-apis","dir":"","previous_headings":"","what":"tryr: Manage R Configuration at the Command Line","title":"tryr: Manage R Configuration at the Command Line","text":"logic: catch error log ERROR + print error message STDERR return generic status 500 message set status code response object 500 log ERROR message condition attribute return specific HTTP error code structured output set status code response object error log SUCCESS message element return specific HTTP status code structured output set status code response object log SUCCESS generic 200 message return object (default status code 200 assumed)","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP messages — http-messages","title":"HTTP messages — http-messages","text":"HTTP messages","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP messages — http-messages","text":"","code":"http_error(status = 500L, message = NULL)  http_success(status = 200L, message = NULL, body = NULL)"},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP messages — http-messages","text":"status HTTP status code. message Error message. body list, additional values returned.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTTP messages — http-messages","text":"http_error returns error custom condition attribute. http_success returns list.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http-messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP messages — http-messages","text":"","code":"try(http_error()) #> Error : Status 500: Internal Server Error try(http_error(400)) #> Error : Status 400: Bad Request try(http_error(400, \"Sorry\")) #> Error : Status 400: Bad Request - Sorry  http_success() #> $category #> [1] \"Success\" #>  #> $status #> [1] 200 #>  #> $message #> [1] \"Status 200: OK\" #>  #> attr(,\"class\") #> [1] \"http_success\" http_success(201) #> $category #> [1] \"Success\" #>  #> $status #> [1] 201 #>  #> $message #> [1] \"Status 201: Created\" #>  #> attr(,\"class\") #> [1] \"http_success\" http_success(201, \"Awesome\") #> $category #> [1] \"Success\" #>  #> $status #> [1] 201 #>  #> $message #> [1] \"Status 201: Created - Awesome\" #>  #> attr(,\"class\") #> [1] \"http_success\" http_success(201, \"Awesome\", list(name = \"Jane\", count = 6)) #> $category #> [1] \"Success\" #>  #> $status #> [1] 201 #>  #> $message #> [1] \"Status 201: Created - Awesome\" #>  #> $body #> $body$name #> [1] \"Jane\" #>  #> $body$count #> [1] 6 #>  #>  #> attr(,\"class\") #> [1] \"http_success\""},{"path":"https://hub.analythium.io/tryr/reference/http_status_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame with possible status codes and default messages — http_status_codes","title":"Data frame with possible status codes and default messages — http_status_codes","text":"Data frame possible status codes default messages","code":""},{"path":"https://hub.analythium.io/tryr/reference/http_status_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame with possible status codes and default messages — http_status_codes","text":"","code":"http_status_codes"},{"path":"https://hub.analythium.io/tryr/reference/http_status_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame with possible status codes and default messages — http_status_codes","text":"object class data.frame 62 rows 3 columns.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http_try.html","id":null,"dir":"Reference","previous_headings":"","what":"Try mechanism for Plumber APIs — http_try","title":"Try mechanism for Plumber APIs — http_try","text":"Helps differentiate client (4xx) server (5xx) errors, provides mechanism return custom status codes combination http_error() https_success().","code":""},{"path":"https://hub.analythium.io/tryr/reference/http_try.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try mechanism for Plumber APIs — http_try","text":"","code":"http_try(res, expr, silent = TRUE, ...)"},{"path":"https://hub.analythium.io/tryr/reference/http_try.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try mechanism for Plumber APIs — http_try","text":"res response object. expr expression. silent report error messages suppressed try()? ... Arguments passed try()","code":""},{"path":"https://hub.analythium.io/tryr/reference/http_try.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try mechanism for Plumber APIs — http_try","text":"list results expr. side effect setting response status code log message.","code":""},{"path":"https://hub.analythium.io/tryr/reference/http_try.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try mechanism for Plumber APIs — http_try","text":"","code":"res <- list() http_try(res) #> Error in try(expr, silent = silent, ...) :  #>   argument \"expr\" is missing, with no default #> $category #> [1] \"Server Error\" #>  #> $status #> [1] 500 #>  #> $message #> [1] \"Internal Server Error\" #>  http_try(res, {2 + 2}) #> [1] 4 http_try(res, http_error(401)) #> $category #> [1] \"Client Error\" #>  #> $status #> [1] 401 #>  #> $message #> [1] \"Status 401: Unauthorized\" #>  http_try(res, http_success(201)) #> $category #> [1] \"Success\" #>  #> $status #> [1] 201 #>  #> $message #> [1] \"Status 201: Created\" #>  http_try(res, {lm(NULL)}) #> Error in terms.formula(formula, data = data) :  #>   argument is not a valid model #> $category #> [1] \"Server Error\" #>  #> $status #> [1] 500 #>  #> $message #> [1] \"Internal Server Error\" #>  http_try(res, {stop(\"Stop!!!\")}) #> Error in try(expr, silent = silent, ...) : Stop!!! #> $category #> [1] \"Server Error\" #>  #> $status #> [1] 500 #>  #> $message #> [1] \"Internal Server Error\" #>   f <- function() stop(\"Stop!!!\") http_try(res, {f()}) #> Error in f() : Stop!!! #> $category #> [1] \"Server Error\" #>  #> $status #> [1] 500 #>  #> $message #> [1] \"Internal Server Error\" #>"},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Message to STDIO or STDERR — msg","title":"Message to STDIO or STDERR — msg","text":"Message STDIO STDERR","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Message to STDIO or STDERR — msg","text":"","code":"msg(title = \"\", message = \"\", level = \"INFO\", json = NULL, digits = NULL)"},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Message to STDIO or STDERR — msg","text":"title Title. message Message. level Log level. json Log format JSON (default TRUE). digits Digits seconds (default 2L).","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Message to STDIO or STDERR — msg","text":"TRUE FALSE: log event happened? side effect log message STDIO STDERR.","code":""},{"path":"https://hub.analythium.io/tryr/reference/msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Message to STDIO or STDERR — msg","text":"","code":"msg(\"Success\", \"We did it!\") #> 2022-10-07 05:00:21.85 [INFO   ] Success - We did it! msg(\"Success\", \"We did it!\", \"SUCCESS\") msg(\"Crap\", \"Oh no ...\", \"ERROR\")  msg(\"Success\", \"We did it!\", \"SUCCESS\", json=TRUE) msg(\"Success\", \"We did it!\", json=TRUE) #> {\"ts\":\"2022-10-07 05:00:21.86\",\"ut\":1665118821,\"level\":\"INFO\",\"value\":3,\"title\":\"Success\",\"message\":\"We did it!\"} msg(\"Crap\", \"Oh no ...\", \"ERROR\", json=TRUE)  msg(\"Success\", \"We did it!\", digits = 0) #> 2022-10-07 05:00:21 [INFO   ] Success - We did it! msg(\"Success\", \"We did it!\", digits = 6) #> 2022-10-07 05:00:21.871148 [INFO   ] Success - We did it!"},{"path":"https://hub.analythium.io/tryr/news/index.html","id":"version-001","dir":"Changelog","previous_headings":"","what":"Version 0.0.1","title":"Version 0.0.1","text":"Experimental release.","code":""}]
